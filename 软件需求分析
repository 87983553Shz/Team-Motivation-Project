# 软件需求分析

## 1. 引言

本项目旨在实现一个学校各专业班级学生信息管理系统，通过对学生信息的录入、查询、排序等功能，为学校提供便捷的学生信息管理手段。该系统将涉及多个功能模块，每个功能模块由不同的团队成员负责实现。在此，我们将对其中的若干功能进行详细的需求分析。

## 2. 功能模块

### 2.1 录入学生信息模块

#### 2.1.1 功能描述

用户可以通过该模块向系统中添加新的学生信息，包括学号、姓名、专业、班级、以及 3 门成绩。学生信息将存储在文件 `studentInit.dat` 中。

#### 2.1.2 函数原型

```c
void Input(STU *p, int n);
```

### 2.2 学生信息输出模块

#### 2.2.1 功能描述

用户可以通过该模块查看系统中存储的学生信息，以表格形式屏幕输出。输出的信息包括学号、姓名、专业、班级、以及 3 门成绩。

#### 2.2.2 函数原型

```c
void Output(STU *p);
```

### 2.3 学生信息查询模块

#### 2.3.1 功能描述

用户可以通过该模块根据班级和成绩进行综合查询学生信息。例如，查询某班级总分大于指定值的学生信息。

#### 2.3.2 函数原型

```c
void Search(STU *p, int classNo, char s, int scoreSum);
```

### 2.4 课程最高分查询模块

#### 2.4.1 功能描述

用户可以通过该模块查询某门课程分数最高的学生信息。

#### 2.4.2 函数原型

```c
int Max(STU *p, int scoreIndex);
```

### 2.5 学生信息排序模块

#### 2.5.1 功能描述

该模块包含两个排序功能，一个是对所有学生按平均成绩由低到高进行简单选择排序，另一个是对某个班级的学生按平均成绩由高到低进行冒泡排序。

#### 2.5.2 函数原型

```c
void Sort_select(STU *p);
void Sort_bubble(STU *p, int n);
```

### 2.6 专业课程成绩排序模块

#### 2.6.1 功能描述

用户可以通过该模块查询某个专业学生按某门课程成绩由低到高进行直接插入排序的结果。

#### 2.6.2 函数原型

```c
void Sort_insert(STU *p, int n, char *major);
```

### 2.7 保存学生信息模块

#### 2.7.1 功能描述

用户可以通过该模块将系统中的学生信息保存到文件中。

#### 2.7.2 函数原型

```c
void Save(STU *p, int n);
```

## 3. 局部变量

### 3.1 Sort_bubble 模块局部变量

```c
STU stu_class_ave[N]; // 按平均成绩排序后的某个班级的学生信息
int count; // 实际元素个数
```

### 3.2 Sort_insert 模块局部变量

```c
STU stu_class_subject[N]; // 按某门课程成绩排序后的某个专业的学生信息
int count; // 实际元素个数
```

## 4. 需求分析总结

通过以上需求分析，我们对学生信息管理系统的功能模块、各模块的具体功能以及相关局部变量进行了详细描述。每个功能模块将由不同团队成员进行实现，以达到高效协作的目的。在实现过程中，需要保证各个模块之间的兼容性，以及整体系统的稳定性和可维护性。
